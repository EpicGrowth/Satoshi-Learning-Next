name: Satoshi Station Staging Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: 'staging'
      SERVICE_NAME: 'sats-web-staging'
      REGION: 'us-central1'
      DOCKER_REPO: 'gcr.io/${{ secrets.GCP_PROJECT_ID }}'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker to use Google Cloud
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build and Push Docker image
        run: |
          # Set image name
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_NAME="${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:$TIMESTAMP"
          LATEST_IMAGE="${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:latest"
          
          echo "Building Docker image: $IMAGE_NAME"
          
          # Build and push the Docker image
          docker build -t $IMAGE_NAME -t $LATEST_IMAGE .
          docker push $IMAGE_NAME
          docker push $LATEST_IMAGE
          
          # Save the image name for later use
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run service ${{ env.SERVICE_NAME }} in ${{ env.REGION }} region"
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --image=${{ env.IMAGE_NAME }} \
            --platform=managed \
            --allow-unauthenticated \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="DEPLOY_ENV=${{ env.DEPLOY_ENV }},DEPLOY_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --quiet
            
      - name: Validate deployment
        run: |
          echo "Validating deployment for staging environment"
          DOMAIN="staging.sats.sv"
          
          # Check if the site is accessible
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          until $(curl --output /dev/null --silent --head --fail https://$DOMAIN); do
            if [ ${RETRY_COUNT} -eq ${MAX_RETRIES} ]; then
              echo "Max retries reached. Deployment validation failed for $DOMAIN"
              exit 1
            fi
            
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Waiting for $DOMAIN to be accessible (attempt $RETRY_COUNT of $MAX_RETRIES)..."
            sleep 10
          done
          
          echo "Deployment successfully validated for $DOMAIN"
