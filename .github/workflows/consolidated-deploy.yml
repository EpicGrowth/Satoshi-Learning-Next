name: Satoshi Station Deployment

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging') || (github.ref == 'refs/heads/production' && 'production') || 'staging' }}
      BUCKET_NAME: ${{ github.ref == 'refs/heads/production' && 'sats-sv-static' || 'sats-sv-staging' }}
      SERVICE_NAME: ${{ github.ref == 'refs/heads/production' && 'sats-web' || 'sats-web-staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build
        env:
          # Add any environment variables needed for the build
          NODE_ENV: production

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Google Cloud Storage
        run: |
          echo "Deploying to ${{ env.DEPLOY_ENV }} environment using bucket ${{ env.BUCKET_NAME }}"
          
          # List out directory to debug its structure
          echo "Listing output directory structure:"
          find ./out -type d | sort
          
          # Sync all files to the bucket
          gsutil -m rsync -r -d ./out gs://${{ env.BUCKET_NAME }}
          
          # Set cache control headers for different file types
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" gs://${{ env.BUCKET_NAME }}/**/*.html
          
          # Set cache for _next directory (App Router static assets)
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ env.BUCKET_NAME }}/_next/**
          
          # Try to set cache for any remaining static assets
          gsutil -m setmeta -h "Cache-Control:public, max-age=86400" gs://${{ env.BUCKET_NAME }}/static/** || echo "No static directory found, continuing"
          
          # Set cache for images, if any
          gsutil -m setmeta -h "Cache-Control:public, max-age:31536000" gs://${{ env.BUCKET_NAME }}/images/** || echo "No images directory found, continuing"

      - name: Update Cloud Run service
        run: |
          echo "Updating Cloud Run service ${{ env.SERVICE_NAME }} for ${{ env.DEPLOY_ENV }} environment"
          
          # If using Cloud Run to serve the static content, update the service
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --region=us-central1 \
            --quiet
            
      - name: Validate deployment
        run: |
          echo "Validating deployment for ${{ env.DEPLOY_ENV }} environment"
          DOMAIN="${{ env.DEPLOY_ENV == 'production' && 'www.sats.sv' || 'staging.sats.sv' }}"
          
          # Check if the site is accessible
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          until $(curl --output /dev/null --silent --head --fail https://$DOMAIN); do
            if [ ${RETRY_COUNT} -eq ${MAX_RETRIES} ]; then
              echo "Max retries reached. Deployment validation failed for $DOMAIN"
              exit 1
            fi
            
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Waiting for $DOMAIN to be accessible (attempt $RETRY_COUNT of $MAX_RETRIES)..."
            sleep 10
          done
          
          echo "Deployment successfully validated for $DOMAIN"
