name: Deploy to Staging

on:
  push:
    branches:
      - main
      - development
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install CSS optimization dependencies
        run: npm install --save-dev critters
        
      - name: Clean repository structure
        run: |
          # Check if repo directory exists and remove it to avoid confusion
          if [ -d "repo" ]; then
            echo "Removing repo directory to avoid build confusion"
            rm -rf repo
          fi
          
      - name: Create production next.config.js with CSS fixes
        run: |
          cat > next.config.js << EOL
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            output: 'standalone',
            distDir: '.next',
            images: {
              domains: ['sats.sv', 'staging.sats.sv'],
              formats: ['image/avif', 'image/webp'],
              unoptimized: true,
            },
            // Ensure proper static asset loading
            assetPrefix: '',
            trailingSlash: true,
            poweredByHeader: false,
            eslint: {
              ignoreDuringBuilds: true,
            },
            typescript: {
              ignoreBuildErrors: true,
            },
            experimental: {
              // Optimize CSS loading
              optimizeCss: true,
              // Force runtime to be server-side
              runtime: 'nodejs'
            },
            // Ensure CSS processing is properly configured
            webpack: (config, { isServer }) => {
              if (!isServer) {
                // Properly configure the CSS loading/extraction
                if (!config.optimization) config.optimization = {};
                if (!config.optimization.splitChunks) config.optimization.splitChunks = {};
                if (!config.optimization.splitChunks.cacheGroups) config.optimization.splitChunks.cacheGroups = {};
                
                config.optimization.splitChunks.cacheGroups.styles = {
                  name: 'styles',
                  test: /\\.css$/,
                  chunks: 'all',
                  enforce: true,
                };
              }
              return config;
            },
          };
          
          module.exports = nextConfig;
          EOL

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_URL: 'https://staging.sats.sv'
          # Force a unique build ID to prevent caching issues
          NEXT_PUBLIC_BUILD_ID: "sats-staging-${{ github.sha }}-${{ github.run_number }}"
          # Enable more verbose logging for debugging
          NEXT_TELEMETRY_DEBUG: 1
          # Ensure CSS is properly processed
          NODE_ENV: 'production'
          
      - name: Create .env.production
        run: |
          cat > .env.production << EOL
          # Force production mode
          NODE_ENV=production
          
          # Disable caching headers in Next.js
          NEXT_CACHE_HEADERS=false
          
          # Base URL
          NEXT_PUBLIC_BASE_URL=https://staging.sats.sv
          
          # Force a unique build ID to prevent caching issues
          NEXT_PUBLIC_BUILD_ID=sats-staging-${{ github.sha }}-${{ github.run_number }}
          
          # Telemetry for debugging
          NEXT_TELEMETRY_DEBUG=1
          EOL

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker gcr.io --quiet
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/sats-web-staging:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: sats-web-staging
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/sats-web-staging:${{ github.sha }}
          region: europe-west1
          flags: --allow-unauthenticated --port=8080

      - name: Show deployed URL
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
