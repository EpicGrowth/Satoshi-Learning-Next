name: Deploy to Staging with Static Assets

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update next.config.js for asset URLs
        run: |
          cat > next.config.js << EOL
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            output: 'standalone',
            images: {
              domains: ['sats.sv', 'staging.sats.sv'],
              formats: ['image/avif', 'image/webp'],
              unoptimized: true,
            },
            trailingSlash: true,
            // Ensure consistent asset URLs with basePath instead of assetPrefix
            basePath: '',
            // Force all asset URLs to be absolute from the root
            assetPrefix: '',
            poweredByHeader: false,
            eslint: {
              ignoreDuringBuilds: true,
            },
            typescript: {
              ignoreBuildErrors: true,
            },
            // Add crossOrigin configuration to help with resource loading
            crossOrigin: 'anonymous',
            // Disable compression in Next.js as it can cause issues with static assets
            compress: false,
            // Force all scripts to load with standard loading priority
            optimizeFonts: false,
            // Ensure static files are copied properly
            experimental: {
              isrMemoryCacheSize: 0,
              cpus: 1
            },
          };
          
          module.exports = nextConfig;
          EOL

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_URL: 'https://staging.sats.sv'

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker gcr.io --quiet
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/sats-web-staging:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: sats-web-staging
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/sats-web-staging:${{ github.sha }}
          region: europe-west1
          flags: --allow-unauthenticated --port=3000
          
      - name: Show deployed URL
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
